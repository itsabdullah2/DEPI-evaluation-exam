  => Answers of Question one
    1 - Void elements
    2 - "em" takes its value from the parent element, "rem" takes its value from the html, "px" it's a static unit

    3 - "button" Can contain any HTML content within it, it's flexible. "input" not flexible working with, I can use it in a simple situation, at the end it's a self closing tag element

    4- "Hoisting" is a javascript mechanism where variables and function declarations move to the top of their scope before code execution.
    "Event loop" Javascript known as a single-threaded language, "Event Loop" JavaScript is known as a single-threaded language,

    5 - "for .. in" is used to iterate over the keys of an object, while "for .. of" is used to iterate over the values of an object.

  => Answers of Question Two
    1 - Expected output of console.log(d.greeting) is => Hello. Because "b" and "c" refers to the same object in the memory
    
    2 - Expected output of console.log(y) is => 50. Because (Numbers, Strings, Booleans, Undefined, null) are primitive types, when I assign a primitive value to a variable, I just creating a new copy of that value and store it to a different location in memory.

    3 - Expected output of console.log(a.length) is => 101. I can add new element to any valid index of an array. We can imagine that the array will be like that ["dog", "cat", "hen", <96 element>, "fox"]

    4 - Expected output of console.log(shape.diameter()), console.log(shape.perimeter()) is => 20, NaN

    5 - Expected output of sum(10, 20) is 30 if I console it. About thd diff(10, 20) the answer is => ReferenceError: Cannot access 'diff' before initialization

    6 - Expected output of myFunc is => Object the "...args" is called "rest parameters" and it's a special syntax to represent an undefined number of arguments as an object.

    7 - Expected output of console.log(typeof(sum)) is => Number.

  => Answers of Question Three
    1 - paragraph 3 will take the color blue, and paragraph 2 will take the color beige

    2 - <div>
            <h2>Mailing Address</h2>
            <address>
                6410 Via Real <br />
                Carpinteria, CA 93013 <br />
                <a href="mailto:info@linkedin.com">info@linkedin.com</a>
            </address>
        </div>

    3 - function araAnagrams(word1, word2) {
  // Check the length of both words
  if (word1.length !== word2.length) {
    throw new Error(`Word ${word1} and ${word2} are not anagrams`)
  }

  const count = {};

  for (let i = 0; i < word1.length; i++) {
    const char = word1[i];
    // if the value is there then add 1 otherwise return 1
    count[char] = (count[char] || 0) + 1;
  }

  for (let i = 0; i < word2.length; i++) {
    const char = word2[i];
    if (!count[char]) return false; // Character not found in word1
    count[char]--;
  }
  return true;
}
    Explanation of areAnagrams function:
      so the function checks the length of the two words and then an object created to store how many time the character appears in the first word and in the second loop checks if all characters in the second word matches with the first word if it does then decrement the count by one if it doesn't return false of all of that are true then return true, right?

    4 - function calculateMean(numbers) {
  if (numbers.length === 0) return;

  let sum = 0;
  for (let i = 0; i < numbers.length; i++) {
    sum += numbers[i];
  }

  const mean = sum / numbers.length;
  return mean;
}

    5 - function checkTheSeason(userInput) {
  const objOfSeasons = {
    winter: ['december', 'january', 'february', 'dec', 'jan', 'feb'],
    spring: ['march', 'april', 'may', 'mar', 'apr', 'may'],
    summer: ['june', 'july', 'august', 'jun', 'jul', 'aug'],
    autumn: ['september', 'october', 'november', 'sep', 'oct', 'nov'],
  };

  for (let season in objOfSeasons) {
    for (let month of objOfSeasons[season]) {
      if (userInput.toLowerCase() === month) return season;
    }
  }
}

    6 - function factorial(n) {
            if (n === 0) return 1;

            return n * factorial(n - 1);
        }

    7 - function duplicateArr(arr) {
            return [...arr, ...arr];
        }

    8 - function emptyArr(arr) {
        // return arr.length = 0

        // return arr = []

        // return {
        //   result: arr.splice(0, arr.length), // output an array of deleted element
        //   length: arr.length, // output 0
        // };
        
        // while (arr.length > 0) {
        //   arr.pop();
        // }
        }

  => Answers of Question Four
  1- 
    html code:
    <div class="container">
      <h1>Hide + Show Content in JavaScript</h1>

      <div class="btns">
        <button id="show">Show</button>
        <button id="hide">Hide</button>
      </div>

      <p class="paragraph">
        Lorem ipsum, dolor sit amet consectetur adipisicing elit.
      </p>
    </div>

    javascript code:
    const showBtn = document.getElementById('show');
    const hideBtn = document.getElementById('hide');
    const content = document.querySelector('.paragraph');

    showBtn.addEventListener('click', () => {
      content.style.display = 'block';
    });
    hideBtn.addEventListener('click', () => {
      content.style.display = 'none';
    });

  // Links for understanding the Event loop
    - https://www.geeksforgeeks.org/what-is-an-event-loop-in-javascript/
    - https://gemini.google.com/app/e9edce7caeb5d00d
    - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Event_loop